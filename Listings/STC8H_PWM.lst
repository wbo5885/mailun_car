C51 COMPILER V9.60.7.0   STC8H_PWM                                                         08/29/2024 12:06:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE STC8H_PWM
OBJECT MODULE PLACED IN .\Objects\STC8H_PWM.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Lib\STC8H_PWM.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\User;.\Dri
                    -ver;.\App) DEBUG OBJECTEXTEND PRINT(.\Listings\STC8H_PWM.lst) TABS(2) OBJECT(.\Objects\STC8H_PWM.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCAI.com ---------------------------------------------*/
   8          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "STC8H_PWM.h"
  14          
  15          //========================================================================
  16          // 函数: PWM_Configuration
  17          // 描述: PWM初始化程序.
  18          // 参数: PWMx: 结构参数,请参考PWM.h里的定义.
  19          // 返回: 成功返回 SUCCESS, 错误返回 FAIL.
  20          // 版本: V1.0, 2012-10-22
  21          //========================================================================
  22          u8 PWM_Configuration(u8 PWM, PWMx_InitDefine *PWMx)
  23          {
  24   1        if(PWM == PWM1)
  25   1        {
  26   2          PWMA_CC1E_Disable();    //关闭输入捕获/比较输出
  27   2          PWMA_CC1NE_Disable();   //关闭比较输出
  28   2          PWMA_CC1S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
  29   2          PWMA_OC1ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
  30   2      
  31   2          if(PWMx->PWM_EnoSelect & ENO1P)
  32   2          {
  33   3            PWMA_CC1E_Enable();     //开启输入捕获/比较输出
  34   3            PWMA_ENO |= ENO1P;
  35   3          }
  36   2          else
  37   2          {
  38   3            PWMA_CC1E_Disable();    //关闭输入捕获/比较输出
  39   3            PWMA_ENO &= ~ENO1P;
  40   3          }
  41   2          if(PWMx->PWM_EnoSelect & ENO1N)
  42   2          {
  43   3            PWMA_CC1NE_Enable();    //开启输入捕获/比较输出
  44   3            PWMA_ENO |= ENO1N;
  45   3          }
  46   2          else
  47   2          {
  48   3            PWMA_CC1NE_Disable();   //关闭输入捕获/比较输出
  49   3            PWMA_ENO &= ~ENO1N;
  50   3          }
  51   2          
  52   2          PWMA_Duty1(PWMx->PWM_Duty);
  53   2          
  54   2          return  SUCCESS;
C51 COMPILER V9.60.7.0   STC8H_PWM                                                         08/29/2024 12:06:30 PAGE 2   

  55   2        }
  56   1        
  57   1        if(PWM == PWM2)
  58   1        {
  59   2          PWMA_CC2E_Disable();    //关闭输入捕获/比较输出
  60   2          PWMA_CC2NE_Disable();   //关闭比较输出
  61   2          PWMA_CC2S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
  62   2          PWMA_OC2ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
  63   2      
  64   2          if(PWMx->PWM_EnoSelect & ENO2P)
  65   2          {
  66   3            PWMA_CC2E_Enable();     //开启输入捕获/比较输出
  67   3            PWMA_ENO |= ENO2P;
  68   3          }
  69   2          else
  70   2          {
  71   3            PWMA_CC2E_Disable();    //关闭输入捕获/比较输出
  72   3            PWMA_ENO &= ~ENO2P;
  73   3          }
  74   2          if(PWMx->PWM_EnoSelect & ENO2N)
  75   2          {
  76   3            PWMA_CC2NE_Enable();    //开启输入捕获/比较输出
  77   3            PWMA_ENO |= ENO2N;
  78   3          }
  79   2          else
  80   2          {
  81   3            PWMA_CC2NE_Disable();   //关闭输入捕获/比较输出
  82   3            PWMA_ENO &= ~ENO2N;
  83   3          }
  84   2          
  85   2          PWMA_Duty2(PWMx->PWM_Duty);
  86   2          
  87   2          return  SUCCESS;
  88   2        }
  89   1        
  90   1        if(PWM == PWM3)
  91   1        {
  92   2          PWMA_CC3E_Disable();    //关闭输入捕获/比较输出
  93   2          PWMA_CC3NE_Disable();   //关闭比较输出
  94   2          PWMA_CC3S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
  95   2          PWMA_OC3ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
  96   2      
  97   2          if(PWMx->PWM_EnoSelect & ENO3P)
  98   2          {
  99   3            PWMA_CC3E_Enable();     //开启输入捕获/比较输出
 100   3            PWMA_ENO |= ENO3P;
 101   3          }
 102   2          else
 103   2          {
 104   3            PWMA_CC3E_Disable();    //关闭输入捕获/比较输出
 105   3            PWMA_ENO &= ~ENO3P;
 106   3          }
 107   2          if(PWMx->PWM_EnoSelect & ENO3N)
 108   2          {
 109   3            PWMA_CC3NE_Enable();    //开启输入捕获/比较输出
 110   3            PWMA_ENO |= ENO3N;
 111   3          }
 112   2          else
 113   2          {
 114   3            PWMA_CC3NE_Disable();   //关闭输入捕获/比较输出
 115   3            PWMA_ENO &= ~ENO3N;
 116   3          }
C51 COMPILER V9.60.7.0   STC8H_PWM                                                         08/29/2024 12:06:30 PAGE 3   

 117   2          
 118   2          PWMA_Duty3(PWMx->PWM_Duty);
 119   2          
 120   2          return  SUCCESS;
 121   2        }
 122   1        
 123   1        if(PWM == PWM4)
 124   1        {
 125   2          PWMA_CC4E_Disable();    //关闭输入捕获/比较输出
 126   2          PWMA_CC4NE_Disable();   //关闭比较输出
 127   2          PWMA_CC4S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
 128   2          PWMA_OC4ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
 129   2      
 130   2          if(PWMx->PWM_EnoSelect & ENO4P)
 131   2          {
 132   3            PWMA_CC4E_Enable();     //开启输入捕获/比较输出
 133   3            PWMA_ENO |= ENO4P;
 134   3          }
 135   2          else
 136   2          {
 137   3            PWMA_CC4E_Disable();    //关闭输入捕获/比较输出
 138   3            PWMA_ENO &= ~ENO4P;
 139   3          }
 140   2          if(PWMx->PWM_EnoSelect & ENO4N)
 141   2          {
 142   3            PWMA_CC4NE_Enable();    //开启输入捕获/比较输出
 143   3            PWMA_ENO |= ENO4N;
 144   3          }
 145   2          else
 146   2          {
 147   3            PWMA_CC4NE_Disable();   //关闭输入捕获/比较输出
 148   3            PWMA_ENO &= ~ENO4N;
 149   3          }
 150   2          
 151   2          PWMA_Duty4(PWMx->PWM_Duty);
 152   2          
 153   2          return  SUCCESS;
 154   2        }
 155   1        
 156   1        if(PWM == PWMA)
 157   1        {
 158   2      //    PWMA_OC1_ReloadEnable(PWMx->PWM_Reload);  //输出比较的预装载使能
 159   2      //    PWMA_OC1_FastEnable(PWMx->PWM_Fast);    //输出比较快速功能使能
 160   2      //    PWMA_CCPCAPreloaded(PWMx->PWM_PreLoad); //捕获/比较预装载控制位(该位只对具有互补输出的通道起作用)
 161   2      //    PWMA_BrakeEnable(PWMx->PWM_BrakeEnable);  //开启/禁止刹车输入
 162   2      
 163   2          PWMA_DeadTime(PWMx->PWM_DeadTime);  //死区发生器设置
 164   2          PWMA_AutoReload(PWMx->PWM_Period);  //周期设置
 165   2          PWMA_BrakeOutputEnable(PWMx->PWM_MainOutEnable);  //主输出使能
 166   2          PWMA_CEN_Enable(PWMx->PWM_CEN_Enable);  //使能计数器
 167   2          
 168   2          return  0;
 169   2        }
 170   1      
 171   1        if(PWM == PWM5)
 172   1        {
 173   2          PWMB_CC5E_Disable();    //关闭输入捕获/比较输出
 174   2          PWMB_CC5S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
 175   2          PWMB_OC5ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
 176   2      
 177   2          if(PWMx->PWM_EnoSelect & ENO5P)
 178   2          {
C51 COMPILER V9.60.7.0   STC8H_PWM                                                         08/29/2024 12:06:30 PAGE 4   

 179   3            PWMB_CC5E_Enable();     //开启输入捕获/比较输出
 180   3            PWMB_ENO |= ENO5P;
 181   3          }
 182   2          else
 183   2          {
 184   3            PWMB_CC5E_Disable();    //关闭输入捕获/比较输出
 185   3            PWMB_ENO &= ~ENO5P;
 186   3          }
 187   2          
 188   2          PWMB_Duty5(PWMx->PWM_Duty);
 189   2          
 190   2          return  SUCCESS;
 191   2        }
 192   1        
 193   1        if(PWM == PWM6)
 194   1        {
 195   2          PWMB_CC6E_Disable();    //关闭输入捕获/比较输出
 196   2          PWMB_CC6S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
 197   2          PWMB_OC6ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
 198   2      
 199   2          if(PWMx->PWM_EnoSelect & ENO6P)
 200   2          {
 201   3            PWMB_CC6E_Enable();     //开启输入捕获/比较输出
 202   3            PWMB_ENO |= ENO6P;
 203   3          }
 204   2          else
 205   2          {
 206   3            PWMB_CC6E_Disable();    //关闭输入捕获/比较输出
 207   3            PWMB_ENO &= ~ENO6P;
 208   3          }
 209   2          
 210   2          PWMB_Duty6(PWMx->PWM_Duty);
 211   2          
 212   2          return  SUCCESS;
 213   2        }
 214   1        
 215   1        if(PWM == PWM7)
 216   1        {
 217   2          PWMB_CC7E_Disable();    //关闭输入捕获/比较输出
 218   2          PWMB_CC7S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
 219   2          PWMB_OC7ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
 220   2      
 221   2          if(PWMx->PWM_EnoSelect & ENO7P)
 222   2          {
 223   3            PWMB_CC7E_Enable();     //开启输入捕获/比较输出
 224   3            PWMB_ENO |= ENO7P;
 225   3          }
 226   2          else
 227   2          {
 228   3            PWMB_CC7E_Disable();    //关闭输入捕获/比较输出
 229   3            PWMB_ENO &= ~ENO7P;
 230   3          }
 231   2          
 232   2          PWMB_Duty7(PWMx->PWM_Duty);
 233   2          
 234   2          return  SUCCESS;
 235   2        }
 236   1        
 237   1        if(PWM == PWM8)
 238   1        {
 239   2          PWMB_CC8E_Disable();    //关闭输入捕获/比较输出
 240   2          PWMB_CC8S_Direction(CCAS_OUTPUT);   //CCnS仅在通道关闭时才是可写的
C51 COMPILER V9.60.7.0   STC8H_PWM                                                         08/29/2024 12:06:30 PAGE 5   

 241   2          PWMB_OC8ModeSet(PWMx->PWM_Mode);    //设置输出比较模式
 242   2      
 243   2          if(PWMx->PWM_EnoSelect & ENO8P)
 244   2          {
 245   3            PWMB_CC8E_Enable();     //开启输入捕获/比较输出
 246   3            PWMB_ENO |= ENO8P;
 247   3          }
 248   2          else
 249   2          {
 250   3            PWMB_CC8E_Disable();    //关闭输入捕获/比较输出
 251   3            PWMB_ENO &= ~ENO8P;
 252   3          }
 253   2          
 254   2          PWMB_Duty8(PWMx->PWM_Duty);
 255   2          
 256   2          return  SUCCESS;
 257   2        }
 258   1        
 259   1        if(PWM == PWMB)
 260   1        {
 261   2      //    PWMB_OC5_ReloadEnable(PWMx->PWM_Reload);  //输出比较的预装载使能
 262   2      //    PWMB_OC5_FastEnable(PWMx->PWM_Fast);    //输出比较快速功能使能
 263   2      //    PWMB_CCPCBPreloaded(PWMx->PWM_PreLoad); //捕获/比较预装载控制位(该位只对具有互补输出的通道起作用)
 264   2      //    PWMB_BrakeEnable(PWMx->PWM_BrakeEnable);  //开启/禁止刹车输入
 265   2      
 266   2          PWMB_DeadTime(PWMx->PWM_DeadTime);  //死区发生器设置
 267   2          PWMB_AutoReload(PWMx->PWM_Period);  //周期设置
 268   2          PWMB_BrakeOutputEnable(PWMx->PWM_MainOutEnable);  //主输出使能
 269   2          PWMB_CEN_Enable(PWMx->PWM_CEN_Enable);  //使能计数器
 270   2          
 271   2          return  0;
 272   2        }
 273   1      
 274   1        return  FAIL; //错误
 275   1      }
 276          
 277          //========================================================================
 278          // 函数: UpdatePwm
 279          // 描述: PWM占空比更新程序.
 280          // 参数: PWM: PWM通道/组号, PWMx结构参数,请参考PWM.h里的定义.
 281          // 返回: none.
 282          // 版本: V1.0, 2012-10-22
 283          //========================================================================
 284          void UpdatePwm(u8 PWM, PWMx_Duty *PWMx)
 285          {
 286   1        switch(PWM)
 287   1        {
 288   2          case PWM1:
 289   2            PWMA_Duty1(PWMx->PWM1_Duty);
 290   2          break;
 291   2      
 292   2          case PWM2:
 293   2            PWMA_Duty2(PWMx->PWM2_Duty);
 294   2          break;
 295   2      
 296   2          case PWM3:
 297   2            PWMA_Duty3(PWMx->PWM3_Duty);
 298   2          break;
 299   2      
 300   2          case PWM4:
 301   2            PWMA_Duty4(PWMx->PWM4_Duty);
 302   2          break;
C51 COMPILER V9.60.7.0   STC8H_PWM                                                         08/29/2024 12:06:30 PAGE 6   

 303   2      
 304   2          case PWM5:
 305   2            PWMB_Duty5(PWMx->PWM5_Duty);
 306   2          break;
 307   2      
 308   2          case PWM6:
 309   2            PWMB_Duty6(PWMx->PWM6_Duty);
 310   2          break;
 311   2      
 312   2          case PWM7:
 313   2            PWMB_Duty7(PWMx->PWM7_Duty);
 314   2          break;
 315   2      
 316   2          case PWM8:
 317   2            PWMB_Duty8(PWMx->PWM8_Duty);
 318   2          break;
 319   2      
 320   2          case PWMA:
 321   2            PWMA_Duty1(PWMx->PWM1_Duty);
 322   2            PWMA_Duty2(PWMx->PWM2_Duty);
 323   2            PWMA_Duty3(PWMx->PWM3_Duty);
 324   2            PWMA_Duty4(PWMx->PWM4_Duty);
 325   2          break;
 326   2      
 327   2          case PWMB:
 328   2            PWMB_Duty5(PWMx->PWM5_Duty);
 329   2            PWMB_Duty6(PWMx->PWM6_Duty);
 330   2            PWMB_Duty7(PWMx->PWM7_Duty);
 331   2            PWMB_Duty8(PWMx->PWM8_Duty);
 332   2          break;
 333   2        }
 334   1      }
 335          
 336          /*********************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1375    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
