C51 COMPILER V9.60.7.0   MAIN                                                              08/29/2024 12:06:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\User;.\Driver;
                    -.\App) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "Config.h"
   2          #include "Delay.h"
   3          #include "GPIO.h"
   4          #include "UART.h"
   5          #include "NVIC.h"
   6          #include "Switch.h"
   7          
   8          #include "App.h"
   9          
  10          #include "Light.h"
  11          #include "Key.h"
  12          #include "Battery.h"
  13          #include "Buzzer.h"
  14          #include "Ultrasonic.h"
  15          #include "Motors.h"
  16          #include "Tracker.h"
  17          
  18          /******************
  19          麦轮循迹小车
  20          
  21          - 按下按键：所有车轮前进，后退
  22          
  23          
  24          ******************/
  25          
  26          void GPIO_config(void) {
  27   1        GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  28   1        GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;    //指定要初始化的IO,
  29   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  30   1        GPIO_Inilize(GPIO_P1, &GPIO_InitStructure);//初始化
  31   1      }
  32          
  33          void UART_config(void) {
  34   1        // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  35   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
  36   1        
  37   1        // ------------------------UART1------------------------
  38   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UAR
             -T_9bit_BRTx
  39   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口
             -2固定使用BRT_Timer2)
  40   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  41   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  42   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  43   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  44   1      
  45   1        NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  46   1        UART1_SW(UART1_SW_P30_P31);   // 引脚选择, UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P4
             -3_P44
  47   1      
  48   1        // ------------------------UART2------------------------
  49   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UAR
C51 COMPILER V9.60.7.0   MAIN                                                              08/29/2024 12:06:30 PAGE 2   

             -T_9bit_BRTx
  50   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口
             -2固定使用BRT_Timer2)
  51   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  52   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  53   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  54   1        UART_Configuration(UART2, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  55   1      
  56   1        NVIC_UART2_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  57   1        UART2_SW(UART2_SW_P10_P11);   // 引脚选择, UART2_SW_P10_P11,UART2_SW_P46_P47
  58   1      }
  59          
  60          
  61          void Key_on_up() {
  62   1        Light_off(LIGHT_ALL);
  63   1        printf("Key up\n");
  64   1      //  Motors_stop();
  65   1      }
  66          float vcc = 0;
  67          
  68          // F:Forward前进
  69          // B:Backward后退
  70          /**
  71          duty:    0  --------------- 50 ---------------  100
  72          speed: B_Max---------------  0 --------------- F_Max
  73          **/
  74          
  75          float duty = 50.0f;
  76          int direction_step = 10;
  77          
  78          u8 move_state = 0;
  79          u8 is_forward = 1;
  80          
  81          
  82          void Key_on_down() {
  83   1        Light_on(LIGHT_ALL);
  84   1        printf("Key down\n");
  85   1      
  86   1      //  duty += direction_step;
  87   1      //  if(duty >= 100){
  88   1      //    direction_step = -10;
  89   1      //  }else if(duty <= 0){
  90   1      //    direction_step = 10;
  91   1      //  }
  92   1      //
  93   1      //  printf("duty: %.2f\n", duty);
  94   1      //  dutyA.PWM3_Duty = PERIOD * duty / 100;
  95   1      //  UpdatePwm(PWM3, &dutyA);
  96   1      
  97   1        // 0前进，1后退，2左平移，3右平移, default停止
  98   1        // 4右掉头，5左掉头
  99   1      //  switch(move_state){
 100   1      //    case 0:  Motors_forward(20);    break;
 101   1      //    case 1:  Motors_backward(20);   break;
 102   1      //    case 2:  Motors_left(30, 0);    break;
 103   1      //    case 3:  Motors_right(30, 0);   break;
 104   1      //    case 4:  Motors_around(40, 1);  break;
 105   1      //    case 5:  Motors_around(40, 0);  break;
 106   1      //    default: Motors_stop();         break;
 107   1      //  }
 108   1      //  move_state++;
C51 COMPILER V9.60.7.0   MAIN                                                              08/29/2024 12:06:30 PAGE 3   

 109   1      //
 110   1      //  if(move_state > 5) move_state = 0;
 111   1      ////  move_state %= 4; // 0,1,2,3...
 112   1      //
 113   1      //  // 等待PWM输出1000ms
 114   1      //  os_wait2(K_TMO, 200); // 200 * 5ms = 1000ms
 115   1      //  // 停车
 116   1      //  Motors_stop();
 117   1      
 118   1         is_tracking = !is_tracking;
 119   1         if(is_tracking){
 120   2           os_create_task(TASK_TRACK); // 开始巡线
 121   2           printf("Start tracking!\n");
 122   2         }else {
 123   2           os_delete_task(TASK_TRACK); // 停止巡线
 124   2           Motors_stop(); // 停车
 125   2           printf("Stop tracking!\n");
 126   2         }
 127   1      }
 128          
 129          void sys_init() {
 130   1        EAXSFR();
 131   1      
 132   1        GPIO_config();
 133   1        UART_config();
 134   1      
 135   1        Light_init();
 136   1        Key_init();
 137   1        Battery_init();
 138   1        Buzzer_init();
 139   1        Motors_init();
 140   1      
 141   1        EA = 1;
 142   1      }
 143          // RTX51定义函数入口
 144          void task_main() _task_ 0 {
 145   1      
 146   1        // 初始化外设
 147   1        sys_init();
 148   1      
 149   1        // 创建按键任务
 150   1        os_create_task(TASK_KEY);
 151   1        // 创建巡线任务
 152   1      //  os_create_task(TASK_TRACK);
 153   1        // 创建串口1接收任务
 154   1        os_create_task(TASK_UART1);
 155   1        // 创建串口2接收任务
 156   1        os_create_task(TASK_BLUETOOTH);
 157   1        // 创建超声测距任务
 158   1        os_create_task(TASK_ULTRASONIC);
 159   1        // 创建电池电量检测任务
 160   1        os_create_task(TASK_BATTERY);
 161   1        // 创建AT指令任务
 162   1        os_create_task(TASK_AT_INST);
 163   1        // 销毁自己
 164   1        os_delete_task(0);
 165   1      }
 166          
 167          void task_at() _task_ TASK_AT_INST{
 168   1        // 休眠2500ms
 169   1        os_wait2(K_TMO, 200); // 200 * 5 = 1000ms
 170   1        os_wait2(K_TMO, 200); // 200 * 5 = 1000ms
C51 COMPILER V9.60.7.0   MAIN                                                              08/29/2024 12:06:30 PAGE 4   

 171   1        os_wait2(K_TMO, 100); // 100 * 5 = 500ms
 172   1        
 173   1        // 执行AT指令的发送
 174   1        // AT+TM\r\n查询BLE蓝牙
 175   1        PrintString2("AT+TM\r\n");
 176   1        
 177   1        printf("AT Task Complete!\n");
 178   1        
 179   1        os_delete_task(TASK_AT_INST);
 180   1      }
 181          
 182          void task_key() _task_ 1 {
 183   1      
 184   1        while(1) {
 185   2          Key_scan();
 186   2          os_wait2(K_TMO, 4);// 20ms
 187   2        }
 188   1      }
 189          
 190          void task_uart1() _task_ TASK_UART1{
 191   1        u8 i;
 192   1        // 串口1接收PC, 通过串口2发给蓝牙
 193   1        while(1) {
 194   2          if(COM1.RX_TimeOut > 0 && --COM1.RX_TimeOut == 0) {
 195   3            //超时计数
 196   3            if(COM1.RX_Cnt > 0) {
 197   4      //        printf("UART1: %d\n", (int)COM1.RX_Cnt);
 198   4              // 这里处理收到的数据，做具体的逻辑，可以调用自己的on_uart1_recv
 199   4              for(i=0; i<COM1.RX_Cnt; i++)  {
 200   5                // RX1_Buffer[i]存的是接收的每个字节，写出用 TX1_write2buff
 201   5                TX2_write2buff(RX1_Buffer[i]);
 202   5              }
 203   4            }
 204   3            COM1.RX_Cnt = 0;
 205   3          }
 206   2      
 207   2          // 不要处理的太快
 208   2          // delay_ms(10);
 209   2          os_wait2(K_TMO, 2);
 210   2        }
 211   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    395    ----
   CONSTANT SIZE    =     78    ----
   XDATA SIZE       =     12      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
