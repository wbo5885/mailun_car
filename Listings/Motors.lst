C51 COMPILER V9.60.7.0   MOTORS                                                            08/29/2024 12:06:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MOTORS
OBJECT MODULE PLACED IN .\Objects\Motors.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Driver\Motors.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib;.\User;.\Dri
                    -ver;.\App) DEBUG OBJECTEXTEND PRINT(.\Listings\Motors.lst) TABS(2) OBJECT(.\Objects\Motors.obj)

line level    source

   1          #include "Motors.h"
   2          #include "GPIO.h"
   3          #include "STC8H_PWM.h"
   4          #include "NVIC.h"
   5          #include "Switch.h"
   6          
   7          static void GPIO_config(void) {
   8   1        // Motor 推挽输出 LQ
   9   1        P1_MODE_OUT_PP(GPIO_Pin_4 | GPIO_Pin_5);
  10   1        // Motor 推挽输出 RQ
  11   1        P1_MODE_OUT_PP(GPIO_Pin_6 | GPIO_Pin_7);
  12   1      
  13   1        // Motor 推挽输出 LH
  14   1        P2_MODE_OUT_PP(GPIO_Pin_0 | GPIO_Pin_1);
  15   1        // Motor 推挽输出 RH
  16   1        P2_MODE_OUT_PP(GPIO_Pin_2 | GPIO_Pin_3);
  17   1      }
  18          
  19          
  20          void Motors_init() {
  21   1        EAXSFR();
  22   1        GPIO_config();
  23   1      }
  24          
  25          #define PERIOD (MAIN_Fosc / 1000)
  26          
  27          PWMx_Duty dutyA;
  28          /*****
  29          将范围在[-100, 100]速度值转成对应的占空比值[0,100]
  30          speed: -100 -------------- 0 --------------- 100
  31          duty:   0   -------------- 50 -------------- 100
  32          *****/
  33          float speed2duty(float speed){
  34   1        // [-100, 100] / 2      ==> [-50, 50]
  35   1        // [-100, 100] / 2 + 50 ==> [0, 100]
  36   1        return speed / 2 + 50;
  37   1      }
  38          
  39          // 设置|修改每个轮子的占空比，引脚选择
  40          static void PWM_config(MotorCfg cfg)
  41          {
  42   1        float LQ_duty = speed2duty(cfg.LQ_speed);
  43   1        float RQ_duty = speed2duty(cfg.RQ_speed);
  44   1        float LH_duty = speed2duty(cfg.LH_speed);
  45   1        float RH_duty = speed2duty(cfg.RH_speed);
  46   1        
  47   1        u8 is_LQ_enable = (cfg.LQ_speed != 0); // 速度不是0，才需要选择对应的引脚
  48   1        u8 is_RQ_enable = (cfg.RQ_speed != 0); // 速度不是0，才需要选择对应的引脚
  49   1        u8 is_LH_enable = (cfg.LH_speed != 0); // 速度不是0，才需要选择对应的引脚
  50   1        u8 is_RH_enable = (cfg.RH_speed != 0); // 速度不是0，才需要选择对应的引脚
  51   1        
  52   1        PWMx_InitDefine   PWMx_InitStructure;
  53   1        // 配置PWM1 LH 左后
  54   1        PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_
C51 COMPILER V9.60.7.0   MOTORS                                                            08/29/2024 12:06:30 PAGE 2   

             -INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  55   1        PWMx_InitStructure.PWM_Duty       = PERIOD * LH_duty / 100.0f;  //PWM占空比时间, 0~Period
  56   1        PWMx_InitStructure.PWM_EnoSelect  = is_LH_enable ? (ENO1P | ENO1N) : 0; //输出通道选择, ENO1P,ENO1N,ENO2P
             -,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  57   1        PWM_Configuration(PWM1, &PWMx_InitStructure);     //初始化PWM
  58   1        // 配置PWM2 RH 右后
  59   1        PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE2;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_
             -INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  60   1        PWMx_InitStructure.PWM_Duty       = PERIOD * RH_duty / 100.0f;  //PWM占空比时间, 0~Period
  61   1        PWMx_InitStructure.PWM_EnoSelect  = is_RH_enable ? (ENO2P | ENO2N) : 0; //输出通道选择, ENO1P,ENO1N,ENO2
             -P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  62   1        PWM_Configuration(PWM2, &PWMx_InitStructure);     //初始化PWM
  63   1        // 配置PWM3 LQ 左前
  64   1        PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE1;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_
             -INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  65   1        PWMx_InitStructure.PWM_Duty       = PERIOD * LQ_duty / 100.0f;  //PWM占空比时间, 0~Period
  66   1        PWMx_InitStructure.PWM_EnoSelect  = is_LQ_enable ? (ENO3P | ENO3N) : 0; //输出通道选择, ENO1P,ENO1N,ENO2
             -P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  67   1        PWM_Configuration(PWM3, &PWMx_InitStructure);
  68   1        // 配置PWM4 RQ 右前
  69   1        PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE2;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_
             -INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  70   1        PWMx_InitStructure.PWM_Duty       = PERIOD * RQ_duty / 100.0f;  //PWM占空比时间, 0~Period
  71   1        PWMx_InitStructure.PWM_EnoSelect  = is_RQ_enable ? (ENO4P | ENO4N) : 0; //输出通道选择, ENO1P,ENO1N,ENO2
             -P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  72   1        PWM_Configuration(PWM4, &PWMx_InitStructure);
  73   1      
  74   1        // 配置PWMA
  75   1        PWMx_InitStructure.PWM_Period   = PERIOD - 1;     //周期时间,   0~65535
  76   1        PWMx_InitStructure.PWM_DeadTime = 0;              //死区发生器设置, 0~255
  77   1        PWMx_InitStructure.PWM_MainOutEnable= ENABLE;     //主输出使能, ENABLE,DISABLE
  78   1        PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;     //使能计数器, ENABLE,DISABLE
  79   1        PWM_Configuration(PWMA, &PWMx_InitStructure);     //初始化PWM通用寄存器,  PWMA,PWMB
  80   1      
  81   1        // 切换PWM通道
  82   1        PWM1_SW(PWM1_SW_P20_P21);     //PWM1_SW_P10_P11,PWM1_SW_P20_P21,PWM1_SW_P60_P61
  83   1        PWM2_SW(PWM2_SW_P22_P23);     //PWM2_SW_P12_P13,PWM2_SW_P22_P23,PWM2_SW_P62_P63
  84   1        PWM3_SW(PWM3_SW_P14_P15);     //PWM3_SW_P14_P15,PWM3_SW_P24_P25,PWM3_SW_P64_P65
  85   1        PWM4_SW(PWM4_SW_P16_P17);     //PWM4_SW_P16_P17,PWM4_SW_P26_P27,PWM4_SW_P66_P67,PWM4_SW_P34_P33
  86   1      
  87   1        // 初始化PWMA的中断
  88   1        NVIC_PWM_Init(PWMA,DISABLE,Priority_0);
  89   1      }
  90          void Motors_forward(float speed) {
  91   1        MotorCfg cfg;
  92   1        cfg.LQ_speed = speed;
  93   1        cfg.RQ_speed = speed;
  94   1        cfg.LH_speed = speed;
  95   1        cfg.RH_speed = speed;
  96   1        PWM_config(cfg);
  97   1      }
  98          
  99          void Motors_backward(float speed) {
 100   1        MotorCfg cfg;
 101   1        cfg.LQ_speed = -speed;
 102   1        cfg.RQ_speed = -speed;
 103   1        cfg.LH_speed = -speed;
 104   1        cfg.RH_speed = -speed;
 105   1        PWM_config(cfg);
 106   1      }
 107          
 108          // 0左， 1左前，-1左后
C51 COMPILER V9.60.7.0   MOTORS                                                            08/29/2024 12:06:30 PAGE 3   

 109          void Motors_left(float speed, char dir){
 110   1        MotorCfg cfg = {0, 0, 0, 0};
 111   1        
 112   1        if(dir == 1 || dir == 0){
 113   2          cfg.RQ_speed = speed;
 114   2          cfg.LH_speed = speed;
 115   2        }
 116   1        
 117   1        if(dir == -1 || dir == 0){
 118   2          cfg.LQ_speed = -speed;
 119   2          cfg.RH_speed = -speed;
 120   2        }
 121   1        
 122   1        PWM_config(cfg);
 123   1      }
 124          
 125          // 0右， 1右前，-1右后
 126          void Motors_right(float speed, char dir){
 127   1        MotorCfg cfg = {0, 0, 0, 0};
 128   1        
 129   1        if(dir == 1 || dir == 0){
 130   2          cfg.LQ_speed = speed;
 131   2          cfg.RH_speed = speed;   
 132   2        }
 133   1        
 134   1        if(dir == -1 || dir == 0){
 135   2          cfg.RQ_speed = -speed;
 136   2          cfg.LH_speed = -speed;    
 137   2        }
 138   1        
 139   1        PWM_config(cfg);
 140   1      }
 141          
 142          // 顺逆时针（原地调头）
 143          // dir:1右掉头（顺时针）,0左掉头（逆时针）
 144          void Motors_around(float speed, char dir){
 145   1        MotorCfg cfg;
 146   1        if(dir == 1){ // 1右掉头（顺时针）
 147   2          cfg.LQ_speed = speed;
 148   2          cfg.RQ_speed = -speed;
 149   2          cfg.LH_speed = speed;
 150   2          cfg.RH_speed = -speed;
 151   2        }else {   // 0左掉头（逆时针）
 152   2          cfg.LQ_speed = -speed;
 153   2          cfg.RQ_speed = speed;
 154   2          cfg.LH_speed = -speed;
 155   2          cfg.RH_speed = speed;
 156   2        }
 157   1        
 158   1        PWM_config(cfg);
 159   1        
 160   1      }
 161          
 162          float clip(float value, float min, float max){
 163   1        if(value < min){
 164   2          return min;
 165   2        }else if(value > max){
 166   2          return max;
 167   2        }
 168   1        return value;
 169   1      }
 170          
C51 COMPILER V9.60.7.0   MOTORS                                                            08/29/2024 12:06:30 PAGE 4   

 171          /************************
 172          
 173          根据x, y运动
 174          ┏    ↑Y+  ┓
 175               
 176                     
 177          ←    0     →
 178          X-          X+
 179              
 180          ┗    ↓Y-  ┛
 181          
 182          X    -100 ------- 0 ------- 100
 183          Y    -100 ------- 0 ------- 100
 184          *************************/
 185          
 186          float max_ratio = 0.6f;
 187          void Motors_move(char x, char y){
 188   1        MotorCfg cfg = {0, 0, 0, 0};
 189   1        // 右平移 y = 0, x = 100
 190   1        // 左平移 y = 0, x = -100
 191   1        
 192   1        cfg.LQ_speed = y + x;
 193   1        cfg.RQ_speed = y - x;
 194   1        cfg.LH_speed = y - x; 
 195   1        cfg.RH_speed = y + x;
 196   1        
 197   1        // clip 钳位
 198   1        cfg.LQ_speed = max_ratio * clip(cfg.LQ_speed, -100, 100);
 199   1        cfg.RQ_speed = max_ratio * clip(cfg.RQ_speed, -100, 100);
 200   1        cfg.LH_speed = max_ratio * clip(cfg.LH_speed, -100, 100);
 201   1        cfg.RH_speed = max_ratio * clip(cfg.RH_speed, -100, 100);
 202   1        
 203   1        PWM_config(cfg);
 204   1        
 205   1        
 206   1      }
 207          
 208          void Motors_stop() {
 209   1        MotorCfg cfg;
 210   1        cfg.LQ_speed = 0;
 211   1        cfg.RQ_speed = 0;
 212   1        cfg.LH_speed = 0;
 213   1        cfg.RH_speed = 0;
 214   1        PWM_config(cfg);
 215   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1913    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =     20     194
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
